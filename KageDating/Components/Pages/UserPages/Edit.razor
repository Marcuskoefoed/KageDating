@page "/users/edit"
@using Microsoft.EntityFrameworkCore
@using KageDating.Services
@using KageDating.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>User</h4>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="User.UserId" value="@User.UserId" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="User.FirstName" class="form-control" />
                    <ValidationMessage For="() => User.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="User.LastName" class="form-control" />
                    <ValidationMessage For="() => User.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="() => User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">UserName:</label>
                    <InputText id="username" @bind-Value="User.UserName" class="form-control" />
                    <ValidationMessage For="() => User.UserName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdate" class="form-label">CreateDate:</label>
                    <InputDate id="createdate" @bind-Value="User.CreateDate" class="form-control" />
                    <ValidationMessage For="() => User.CreateDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" />
                    <ValidationMessage For="() => User.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="User.BirthDate" class="form-control" />
                    <ValidationMessage For="() => User.BirthDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int UserId { get; set; }

    [SupplyParameterFromForm]
    public User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        int? currentUserId = AuthService.GetCurrentUserId();

        if (currentUserId == null)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        User ??= await context.Users.FirstOrDefaultAsync(m => m.UserId == currentUserId);

        if (User is null)
        {
            NavigationManager.NavigateTo("login");
        }
    }

    public async Task UpdateUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(User!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.UserId))
            {
                NavigationManager.NavigateTo("login");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    bool UserExists(int userid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.UserId == userid);
    }
}
