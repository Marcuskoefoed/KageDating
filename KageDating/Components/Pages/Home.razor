@page "/"

@using Microsoft.EntityFrameworkCore
@using KageDating.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager
@inject KageDating.Services.IAuthService AuthService
@using System.ComponentModel.DataAnnotations

<PageTitle>Kage Dating</PageTitle>

<div class="container">
    <header class="text-center my-4">
        <h1>Welcome to Kage Dating!</h1>
        <p class="lead">Find your perfect cake match today.</p>
    </header>

    @if (!AuthService.IsLoggedIn)
    {
        <div class="row justify-content-center">
            <div class="col-md-4">
                <h2>Login</h2>
                @if (!string.IsNullOrEmpty(loginError))
                {
                    <div class="alert alert-danger">@loginError</div>
                }
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="username" class="form-label">Username:</label>
                        <InputText id="username" @bind-Value="loginModel.UserName" class="form-control" />
                        <ValidationMessage For="() => loginModel.UserName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-primary">Login</button>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2>Other Users</h2>
            <button class="btn btn-secondary" @onclick="Logout">Logout</button>
        </div>
        @if (users == null)
        {
            <p>Loading...</p>
        }
        else if (users.Count == 0)
        {
            <p>No other users found.</p>
        }
        else
        {
            <div class="row">
                @foreach (var user in users)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">@user.FirstName @user.LastName</h5>
                                <p class="card-text">Email: @user.Email</p>
                                <!-- Add more user details or actions as needed -->
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }

    <footer class="text-center mt-5">
        <p>&copy; 2024 Kage Dating. All rights reserved.</p>
    </footer>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private List<User> users;
    private string loginError;

    public class LoginModel
    {
        [Required]
        public string UserName { get; set; }

        [Required]
        public string Password { get; set; }
    }

    private async Task HandleLogin()
    {
        var user = await AuthService.Authenticate(loginModel.UserName, loginModel.Password);

        if (user != null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            loginError = "Invalid username or password.";
        }
    }

    private void Logout()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsLoggedIn)
        {
            users = await AuthService.GetUsersAsync();
        }
    }
}
